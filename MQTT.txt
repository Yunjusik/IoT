현 대부분 IoT 관련 프로젝트는 MQTT통신을 이용해 서버와 IoT센서간 통신 수행

MQTT(MQ Telemetry Transport)
-> 센서나 라즈베리파이 같은 임베디드, 모바일 장치사이의 가벼운 저용량 통신을 위해 사용하는 메세지 프로토콜
TCP/IP 기반 위에서 대역폭이 작은 네트워크에서 동작할 수 있도록 설계됨.

MQTT 규약 자체는 메세지를 어떻게 보낼것인지를 정의하는 규약

보통 MQTT를 트위터에 비유

MQTT client - MQTT Broker - MQTT client 식의 메세지 교환을 수행

MQTT 브로커는 각 클라이언트 사이의 중재자역할을 하는 서버개념.

MQTT 클라이언트는 브로커에게 메세지를 전달해주거나 전달받으면 되고, 메세지 형식 자체는 긴 메세지, Json 등의 파일형태도 가능함


대략적인 MQTT 동작원리

메세지 publisher가 있고, 해당 퍼블리셔가 토픽과 데이터를 전달.
이를 다른 클라이언트가 구독의사를 표방할 수 있고, 만약 구독하게된다면 publisher가 메세지를 전달할때마다 브로커가 구독자들에게 똑같이 메세지를 전달하게 됨.

메세지를 발행하고 구독하는 행위를 MQTT에선 토픽이라고 정의함.
토픽은 메세지마다 슬래시로 구분된 계층구조를 가짐 (/) -> ex) myhome/groundfloor/livingroom/temperature


QoS (Quality of Service)
MQTT는 3가지단계의 QoS를 위한 옵션을 제공

0: 메세지를 한번만 전달하고, 전달여부 확인 X (Ack 미확인).
1. 메세지는 한번 이상 전달됨. 그러나 메세지 전달과정을 엄격하게 추적하지 않음.
2: 메세지는 한번만 전달하지만, 메세지의 전달여부 확인하고 과정을 추적함. 높은 품질을 보장하지만, 성능이 낮아짐.

0으로 갈수록 메세지처리의 부하가 적은 대신 손실위험 존재. 
2로갈수록 메세지처리의 부하는 높아지고, 손실위험 낮아짐.


